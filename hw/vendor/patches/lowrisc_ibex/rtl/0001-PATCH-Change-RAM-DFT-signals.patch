From eb4e416c1b7d9695155bda26ee83c36f9d592caf Mon Sep 17 00:00:00 2001
From: Robert Schilling <rschilling@rivosinc.com>
Date: Mon, 23 Dec 2024 09:19:39 +0100
Subject: [PATCH 1/1] [PATCH] Change RAM DFT signals

This is to break a vendoring-cycle, in which modules provided by
OpenTitan and used by Ibex get updated, but for that change to land on
 of the OpenTitan repository, either (a) Ibex needs to be
re-vendored with the instances of the changed modules updated, or (b)
Ibex in OpenTitan gets patched to allow OpenTitan to move forward.

As re-vendoring the updates from OpenTitan into Ibex would require
basing the vendored IPs on the PR branch and the diff is quite
large, option (b) is faster, hence implemented in this patch.

Co-authored-by: Andreas Kurth <adk@lowrisc.org>
Signed-off-by: Robert Schilling <rschilling@rivosinc.com>
---
 ibex_top.sv | 178 ++++++++++++++++++++++++++----------------------
 1 file changed, 95 insertions(+), 83 deletions(-)

diff --git a/ibex_top.sv b/ibex_top.sv
index a90fee0e..085e80ee 100644
--- a/ibex_top.sv
+++ b/ibex_top.sv
@@ -46,105 +46,110 @@ module ibex_top import ibex_pkg::*; #(
   parameter logic [SCRAMBLE_NONCE_W-1:0] RndCnstIbexNonce        = RndCnstIbexNonceDefault
 ) (
   // Clock and Reset
-  input  logic                         clk_i,
-  input  logic                         rst_ni,
+  input  logic                                                         clk_i,
+  input  logic                                                         rst_ni,
 
-  input  logic                         test_en_i,     // enable all clock gates for testing
-  input  prim_ram_1p_pkg::ram_1p_cfg_t ram_cfg_i,
+  // enable all clock gates for testing
+  input  logic                                                         test_en_i,
+  input  prim_ram_1p_pkg::ram_1p_cfg_t                                 ram_cfg_icache_tag_i,
+  output prim_ram_1p_pkg::ram_1p_cfg_rsp_t [ibex_pkg::IC_NUM_WAYS-1:0] ram_cfg_rsp_icache_tag_o,
+  input  prim_ram_1p_pkg::ram_1p_cfg_t                                 ram_cfg_icache_data_i,
+  output prim_ram_1p_pkg::ram_1p_cfg_rsp_t [ibex_pkg::IC_NUM_WAYS-1:0] ram_cfg_rsp_icache_data_o,
 
-  input  logic [31:0]                  hart_id_i,
-  input  logic [31:0]                  boot_addr_i,
+  input  logic [31:0]                                                  hart_id_i,
+  input  logic [31:0]                                                  boot_addr_i,
 
   // Instruction memory interface
-  output logic                         instr_req_o,
-  input  logic                         instr_gnt_i,
-  input  logic                         instr_rvalid_i,
-  output logic [31:0]                  instr_addr_o,
-  input  logic [31:0]                  instr_rdata_i,
-  input  logic [6:0]                   instr_rdata_intg_i,
-  input  logic                         instr_err_i,
+  output logic                                                         instr_req_o,
+  input  logic                                                         instr_gnt_i,
+  input  logic                                                         instr_rvalid_i,
+  output logic [31:0]                                                  instr_addr_o,
+  input  logic [31:0]                                                  instr_rdata_i,
+  input  logic [6:0]                                                   instr_rdata_intg_i,
+  input  logic                                                         instr_err_i,
 
   // Data memory interface
-  output logic                         data_req_o,
-  input  logic                         data_gnt_i,
-  input  logic                         data_rvalid_i,
-  output logic                         data_we_o,
-  output logic [3:0]                   data_be_o,
-  output logic [31:0]                  data_addr_o,
-  output logic [31:0]                  data_wdata_o,
-  output logic [6:0]                   data_wdata_intg_o,
-  input  logic [31:0]                  data_rdata_i,
-  input  logic [6:0]                   data_rdata_intg_i,
-  input  logic                         data_err_i,
+  output logic                                                         data_req_o,
+  input  logic                                                         data_gnt_i,
+  input  logic                                                         data_rvalid_i,
+  output logic                                                         data_we_o,
+  output logic [3:0]                                                   data_be_o,
+  output logic [31:0]                                                  data_addr_o,
+  output logic [31:0]                                                  data_wdata_o,
+  output logic [6:0]                                                   data_wdata_intg_o,
+  input  logic [31:0]                                                  data_rdata_i,
+  input  logic [6:0]                                                   data_rdata_intg_i,
+  input  logic                                                         data_err_i,
 
   // Interrupt inputs
-  input  logic                         irq_software_i,
-  input  logic                         irq_timer_i,
-  input  logic                         irq_external_i,
-  input  logic [14:0]                  irq_fast_i,
-  input  logic                         irq_nm_i,       // non-maskeable interrupt
+  input  logic                                                         irq_software_i,
+  input  logic                                                         irq_timer_i,
+  input  logic                                                         irq_external_i,
+  input  logic [14:0]                                                  irq_fast_i,
+  // non-maskeable interrupt
+  input  logic                                                         irq_nm_i,
 
   // Scrambling Interface
-  input  logic                         scramble_key_valid_i,
-  input  logic [SCRAMBLE_KEY_W-1:0]    scramble_key_i,
-  input  logic [SCRAMBLE_NONCE_W-1:0]  scramble_nonce_i,
-  output logic                         scramble_req_o,
+  input  logic                                                         scramble_key_valid_i,
+  input  logic [SCRAMBLE_KEY_W-1:0]                                    scramble_key_i,
+  input  logic [SCRAMBLE_NONCE_W-1:0]                                  scramble_nonce_i,
+  output logic                                                         scramble_req_o,
 
   // Debug Interface
-  input  logic                         debug_req_i,
-  output crash_dump_t                  crash_dump_o,
-  output logic                         double_fault_seen_o,
+  input  logic                                                         debug_req_i,
+  output crash_dump_t                                                  crash_dump_o,
+  output logic                                                         double_fault_seen_o,
 
   // RISC-V Formal Interface
   // Does not comply with the coding standards of _i/_o suffixes, but follows
   // the convention of RISC-V Formal Interface Specification.
 `ifdef RVFI
-  output logic                         rvfi_valid,
-  output logic [63:0]                  rvfi_order,
-  output logic [31:0]                  rvfi_insn,
-  output logic                         rvfi_trap,
-  output logic                         rvfi_halt,
-  output logic                         rvfi_intr,
-  output logic [ 1:0]                  rvfi_mode,
-  output logic [ 1:0]                  rvfi_ixl,
-  output logic [ 4:0]                  rvfi_rs1_addr,
-  output logic [ 4:0]                  rvfi_rs2_addr,
-  output logic [ 4:0]                  rvfi_rs3_addr,
-  output logic [31:0]                  rvfi_rs1_rdata,
-  output logic [31:0]                  rvfi_rs2_rdata,
-  output logic [31:0]                  rvfi_rs3_rdata,
-  output logic [ 4:0]                  rvfi_rd_addr,
-  output logic [31:0]                  rvfi_rd_wdata,
-  output logic [31:0]                  rvfi_pc_rdata,
-  output logic [31:0]                  rvfi_pc_wdata,
-  output logic [31:0]                  rvfi_mem_addr,
-  output logic [ 3:0]                  rvfi_mem_rmask,
-  output logic [ 3:0]                  rvfi_mem_wmask,
-  output logic [31:0]                  rvfi_mem_rdata,
-  output logic [31:0]                  rvfi_mem_wdata,
-  output logic [31:0]                  rvfi_ext_pre_mip,
-  output logic [31:0]                  rvfi_ext_post_mip,
-  output logic                         rvfi_ext_nmi,
-  output logic                         rvfi_ext_nmi_int,
-  output logic                         rvfi_ext_debug_req,
-  output logic                         rvfi_ext_debug_mode,
-  output logic                         rvfi_ext_rf_wr_suppress,
-  output logic [63:0]                  rvfi_ext_mcycle,
-  output logic [31:0]                  rvfi_ext_mhpmcounters [10],
-  output logic [31:0]                  rvfi_ext_mhpmcountersh [10],
-  output logic                         rvfi_ext_ic_scr_key_valid,
-  output logic                         rvfi_ext_irq_valid,
+  output logic                                                        rvfi_valid,
+  output logic [63:0]                                                 rvfi_order,
+  output logic [31:0]                                                 rvfi_insn,
+  output logic                                                        rvfi_trap,
+  output logic                                                        rvfi_halt,
+  output logic                                                        rvfi_intr,
+  output logic [ 1:0]                                                 rvfi_mode,
+  output logic [ 1:0]                                                 rvfi_ixl,
+  output logic [ 4:0]                                                 rvfi_rs1_addr,
+  output logic [ 4:0]                                                 rvfi_rs2_addr,
+  output logic [ 4:0]                                                 rvfi_rs3_addr,
+  output logic [31:0]                                                 rvfi_rs1_rdata,
+  output logic [31:0]                                                 rvfi_rs2_rdata,
+  output logic [31:0]                                                 rvfi_rs3_rdata,
+  output logic [ 4:0]                                                 rvfi_rd_addr,
+  output logic [31:0]                                                 rvfi_rd_wdata,
+  output logic [31:0]                                                 rvfi_pc_rdata,
+  output logic [31:0]                                                 rvfi_pc_wdata,
+  output logic [31:0]                                                 rvfi_mem_addr,
+  output logic [ 3:0]                                                 rvfi_mem_rmask,
+  output logic [ 3:0]                                                 rvfi_mem_wmask,
+  output logic [31:0]                                                 rvfi_mem_rdata,
+  output logic [31:0]                                                 rvfi_mem_wdata,
+  output logic [31:0]                                                 rvfi_ext_pre_mip,
+  output logic [31:0]                                                 rvfi_ext_post_mip,
+  output logic                                                        rvfi_ext_nmi,
+  output logic                                                        rvfi_ext_nmi_int,
+  output logic                                                        rvfi_ext_debug_req,
+  output logic                                                        rvfi_ext_debug_mode,
+  output logic                                                        rvfi_ext_rf_wr_suppress,
+  output logic [63:0]                                                 rvfi_ext_mcycle,
+  output logic [31:0]                                                 rvfi_ext_mhpmcounters [10],
+  output logic [31:0]                                                 rvfi_ext_mhpmcountersh [10],
+  output logic                                                        rvfi_ext_ic_scr_key_valid,
+  output logic                                                        rvfi_ext_irq_valid,
 `endif
 
   // CPU Control Signals
-  input  ibex_mubi_t                   fetch_enable_i,
-  output logic                         alert_minor_o,
-  output logic                         alert_major_internal_o,
-  output logic                         alert_major_bus_o,
-  output logic                         core_sleep_o,
+  input  ibex_mubi_t                                                  fetch_enable_i,
+  output logic                                                        alert_minor_o,
+  output logic                                                        alert_major_internal_o,
+  output logic                                                        alert_major_bus_o,
+  output logic                                                        core_sleep_o,
 
   // DFT bypass controls
-  input logic                          scan_rst_ni
+  input logic                                                         scan_rst_ni
 );
 
   localparam bit          Lockstep              = SecureIbex;
@@ -603,7 +608,8 @@ module ibex_top import ibex_pkg::*; #(
           .rvalid_o         (),
           .raddr_o          (),
           .rerror_o         (),
-          .cfg_i            (ram_cfg_i),
+          .cfg_i            (ram_cfg_icache_tag_i),
+          .cfg_rsp_o        (ram_cfg_rsp_icache_tag_o[way]),
           .wr_collision_o   (),
           .write_pending_o  (),
 
@@ -640,7 +646,8 @@ module ibex_top import ibex_pkg::*; #(
           .rvalid_o         (),
           .raddr_o          (),
           .rerror_o         (),
-          .cfg_i            (ram_cfg_i),
+          .cfg_i            (ram_cfg_icache_data_i),
+          .cfg_rsp_o        (ram_cfg_rsp_icache_data_o[way]),
           .wr_collision_o   (),
           .write_pending_o  (),
 
@@ -695,7 +702,8 @@ module ibex_top import ibex_pkg::*; #(
           .wmask_i     ({TagSizeECC{1'b1}}),
 
           .rdata_o     (ic_tag_rdata[way]),
-          .cfg_i       (ram_cfg_i)
+          .cfg_i       (ram_cfg_icache_tag_i),
+          .cfg_rsp_o   (ram_cfg_rsp_icache_tag_o[way])
         );
 
         // Data RAM instantiation
@@ -714,7 +722,8 @@ module ibex_top import ibex_pkg::*; #(
           .wmask_i     ({LineSizeECC{1'b1}}),
 
           .rdata_o     (ic_data_rdata[way]),
-          .cfg_i       (ram_cfg_i)
+          .cfg_i       (ram_cfg_icache_data_i),
+          .cfg_rsp_o   (ram_cfg_rsp_icache_data_o[way])
         );
 
         assign icache_tag_alert  = '{default:'b0};
@@ -727,7 +736,9 @@ module ibex_top import ibex_pkg::*; #(
     prim_ram_1p_pkg::ram_1p_cfg_t unused_ram_cfg;
     logic unused_ram_inputs;
 
-    assign unused_ram_cfg    = ram_cfg_i;
+    assign unused_ram_cfg    = |{ram_cfg_icache_tag_i, ram_cfg_icache_data_i};
+    assign ram_cfg_rsp_icache_tag_o  = '0;
+    assign ram_cfg_rsp_icache_data_o = '0;
     assign unused_ram_inputs = (|ic_tag_req) & ic_tag_write & (|ic_tag_addr) & (|ic_tag_wdata) &
                                (|ic_data_req) & ic_data_write & (|ic_data_addr) & (|ic_data_wdata) &
                                (|scramble_key_q) & (|scramble_nonce_q) & scramble_key_valid_q &
@@ -1147,7 +1158,8 @@ module ibex_top import ibex_pkg::*; #(
 
   // X check for top-level inputs
   `ASSERT_KNOWN(IbexTestEnX, test_en_i)
-  `ASSERT_KNOWN(IbexRamCfgX, ram_cfg_i)
+  `ASSERT_KNOWN(IbexRamCfgTagX, ram_cfg_icache_tag_i)
+  `ASSERT_KNOWN(IbexRamCfgDataX, ram_cfg_icache_data_i)
   `ASSERT_KNOWN(IbexHartIdX, hart_id_i)
   `ASSERT_KNOWN(IbexBootAddrX, boot_addr_i)
 
-- 
2.47.0

